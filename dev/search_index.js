var documenterSearchIndex = {"docs":
[{"location":"every/#TB","page":"Every Docstring","title":"TB","text":"","category":"section"},{"location":"every/","page":"Every Docstring","title":"Every Docstring","text":"Modules = [TightlyBound.TB]","category":"page"},{"location":"every/#TightlyBound.TB.tb","page":"Every Docstring","title":"TightlyBound.TB.tb","text":"mutable struct tb{T}\n\nHolds key tight-binding information in real-space. Like hrdat file from Wannier90. Also part of the `tbcrys` object.\n\nHolds\n\nH::Array{Complex{T},3} Hamiltonian. nw×nw×nr\nind_array::Array{Int64,3} nr×3 , holds the r-space supercells of the TB object.\nr_dict::Dict keys are three Ints like [0,0,0], returns the corresponding ind_array index.\nnwan::Int Number of orbitals (generalized wannier functions).\nnr::Int64 number of R-space supercells.\nnonorth::Bool :  true if non-orthogonal. Almost always true in this code.\nS::Array{Complex{T},3} : Overlap matrix, organized like H\nscf::Bool equal to true if requires self-consistency (usually true for fit tb, false for direct from DFT)\nh1::Array{T,2} Has the term determined by scf calculations, if calculated already.\n\n\n\n\n\n","category":"type"},{"location":"every/#TightlyBound.TB.tb_crys","page":"Every Docstring","title":"TightlyBound.TB.tb_crys","text":"mutable struct tb_crys{T}\n\nMain tight-binding object, holds the tight-biding model tb and information about the crystal\n\nHolds\n\ntb::tb Has the key tb info (see above)\ncrys::crystal Has the crystal structure\nnelec::Float64 Number of electrons\ndftenergy::Float64 DFT energy for reference, only for fit to DFT cases.\nscf::Bool  true if requires self-consistency.\ngamma::Array{T, 2} has the ewald calculation results, needed for self-consistency.\neden::Array{Float64,1} electron density, by orbital, if calculated by self-consistency.\nwithin_fit::Bool is true if model is passes tests of being within the fitting parameter space, false for extrapolation\nenergy::Float64 energy in Ryd, if calculated.\nefermi::Float64 Fermi energy in Ryd, if calculated.\n\n\n\n\n\n","category":"type"},{"location":"every/#TightlyBound.TB.tb_crys_kspace","page":"Every Docstring","title":"TightlyBound.TB.tb_crys_kspace","text":"mutable struct tb_crys_kspace{T}\n\nHold k-point tight binding and crystal structure. Similar to tb_crys\n\nHolds\n\ntb::tb_k\ncrys::crystal\nnelec::Float64\ndftenergy::Float64\nscf::Bool\ngamma::Array{T, 2}\neden::Array{Float64,1}\n\n\n\n\n\n","category":"type"},{"location":"every/#TightlyBound.TB.tb_k","page":"Every Docstring","title":"TightlyBound.TB.tb_k","text":"mutable struct tb_k{T}\n\nTight binding object in k-space. Can be from direct import of DFT band structure using atomic proj, or from fft'ed tb object. Similar to real-space version.\n\nHolds\n\nHk::Array{Complex{T},3} Hamiltonian in k-space\nK::Array{Float64,2} K point array. In fractional coordinates of BZ.\nkweights::Array{Float64,1} K point weights.\nk_dict::Dict Dictionary from k-point like [0,0,0] to index.\nnwan::Int64 Number of orbitals / generalized wannier functions.\nnk::Int64 Number of k-points.\nnonorth::Bool \nSk::Array{Complex{T},3} Overlap matrix.\nscf::Bool needs self-consistency?\nh1::Array{T,2} #scf term holds scf term if present\ngrid::Array{Int64,1} dimensions of k-point grid, from regular grid like [8,8,8]\n\n\n\n\n\n","category":"type"},{"location":"every/#TightlyBound.TB.Hk-Tuple{Any,Any,TightlyBound.TB.tb,Any}","page":"Every Docstring","title":"TightlyBound.TB.Hk","text":"function Hk(hk,sk, h::tb, kpoint)\n\nHk function with pre-allocated memory hk, sk\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.Hk-Tuple{TightlyBound.TB.tb,Any}","page":"Every Docstring","title":"TightlyBound.TB.Hk","text":"function Hk(h::tb, kpoint)\n\nCalculate band structure at a k-point from tb\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.Hk-Tuple{TightlyBound.TB.tb_crys,Any}","page":"Every Docstring","title":"TightlyBound.TB.Hk","text":"function Hk(h::tb_crys, kpoint)\n\nCalculate band structure at a k-point from tb_crys\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.Hk-Tuple{TightlyBound.TB.tb_crys_kspace,Any}","page":"Every Docstring","title":"TightlyBound.TB.Hk","text":"function Hk(h::tb_crys_kspace, kpoint)\n\nCalculate band structure at a k-point from a tb_crys_kspace object. Note, can only return precalculated k-points. Need real-space version to get arbitrary k-points.\n\n#Returns\n\nvect - Eigenvectors numwan × numwan complex matrix at kpoint\nvals - Eigenvalues (num_wan)\nhk - Hamiltonian at kpoint\nsk - Overlap matrix at kpoint\nvals0 - <vect | Hk0 | vect> where Hk0 is the non-scf part of the Hamiltonian.\n\n#Arguments\n\nh::tb_crys_kspace - tbcryskspace object\nkpoint - e.g. [0.0,0.0,0.0]\nscf=missing - default is to take SCF from h.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.Hk-Tuple{TightlyBound.TB.tb_k,Any}","page":"Every Docstring","title":"TightlyBound.TB.Hk","text":"function Hk(h::tb_k, kpoint)\n\nCalculate band structure at a k-point from tb_k. Must be pre-calculated k-point.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.calc_bands-Tuple{Any,Array{Float64,2}}","page":"Every Docstring","title":"TightlyBound.TB.calc_bands","text":"function calc_bands(h, kpoints::Array{Float64,2})\n\nCalculate bandstructure for k-points from k-point array. h is a tb or tb_k object.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.calc_bands-Tuple{TightlyBound.TB.tb_crys,Array{Float64,2}}","page":"Every Docstring","title":"TightlyBound.TB.calc_bands","text":"function calc_bands(tbc::tb_crys, kpoints::Array{Float64,2})\n\nCalculate bandstructure for k-points from k-point array. Returns eigenvalues.\n\nArguments\n\ntbc::tb_crys - The tight binding object\nkpoints::Array{Float64,2} - k-point array. e.g. [0.0 0.0 0.0; 0.0 0.0 0.1]\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.calc_energy-Tuple{TightlyBound.TB.tb_crys,Any}","page":"Every Docstring","title":"TightlyBound.TB.calc_energy","text":"function calc_energy(h::tb_crys, kgrid; smearing=0.01, returnk=false)\n\nCalculate energy no fft\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.calc_energy-Tuple{TightlyBound.TB.tb_crys}","page":"Every Docstring","title":"TightlyBound.TB.calc_energy","text":"function calc_energy(tbc::tb_crys; smearing=0.01, returnk=false)\n\nCalculate energy without fft.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.calc_energy_band-Tuple{TightlyBound.TB.tb,Any,Any}","page":"Every Docstring","title":"TightlyBound.TB.calc_energy_band","text":"function calc_energy_band(h::tb, nelec, kgrid; smearing=0.01, returnk=false)\n\ncalculate energy no fft\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.calc_energy_charge_fft-Tuple{TightlyBound.TB.tb_crys}","page":"Every Docstring","title":"TightlyBound.TB.calc_energy_charge_fft","text":"function calc_energy_charge_fft(tbc::tb_crys; grid=missing, smearing=0.01)\n\nDo fft, then calculate energy and charge.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.calc_energy_charge_fft_band-Tuple{Any,Any,Any}","page":"Every Docstring","title":"TightlyBound.TB.calc_energy_charge_fft_band","text":"function calc_energy_charge_fft_band(hk3, sk3, nelec; smearing=0.01, h1 = missing)\n\nCalculate energy and charge density. For internal use.\n\nreturn energy0, efermi, chargeden[:], VECTS, VALS, error_flag\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.calc_energy_fft-Tuple{TightlyBound.TB.tb_crys}","page":"Every Docstring","title":"TightlyBound.TB.calc_energy_fft","text":"function calc_energy_fft(tbc::tb_crys; grid=missing, smearing=0.01, return_more_info=false)\n\nGet energy using fft.\n\nreturns energy\n\nif return_more_info==true then returns etot, efermi, vals, vects\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.calc_energy_fft_band-Tuple{Any,Any,Any}","page":"Every Docstring","title":"TightlyBound.TB.calc_energy_fft_band","text":"function calc_energy_fft_band(hk3, sk3, nelec; smearing=0.01, return_more_info=false, h1 = missing)\n\nReturn energy from hamiltonian hk3, overlap sk3, nelec, etc. Primarly for internal calling after fft.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.ewald_energy","page":"Every Docstring","title":"TightlyBound.TB.ewald_energy","text":"function ewald_energy(tbc::tb_crys_kspace, delta_q=missing)\n\n\n\n\n\n","category":"function"},{"location":"every/#TightlyBound.TB.ewald_energy-2","page":"Every Docstring","title":"TightlyBound.TB.ewald_energy","text":"function ewald_energy(tbc::tb_crys, delta_q=missing)\n\nReturn ewald energy term from tbc. If delta_q, the atomic charge density, is missing, loads from tbc.\n\n\n\n\n\n","category":"function"},{"location":"every/#TightlyBound.TB.ewald_energy-Tuple{TightlyBound.CrystalMod.crystal,Any,Array{Float64,1}}","page":"Every Docstring","title":"TightlyBound.TB.ewald_energy","text":"function ewald_energy(crys::crystal, gamma, delta_q::Array{Float64,1})\n\nDoes the actual calculation.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.find_vbm_cbm-Tuple{Any,Any}","page":"Every Docstring","title":"TightlyBound.TB.find_vbm_cbm","text":"function find_vbm_cbm(eigs, fermi)\n\nFind the valence band max and conduction band minimum from eigs, relative to Fermi level.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.get_dq-Tuple{TightlyBound.CrystalMod.crystal,Array{Float64,1}}","page":"Every Docstring","title":"TightlyBound.TB.get_dq","text":"function get_dq(crys::crystal, chargeden::Array{Float64,1})\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.get_dq-Tuple{TightlyBound.TB.tb_crys_kspace}","page":"Every Docstring","title":"TightlyBound.TB.get_dq","text":"function get_dq(tbc::tb_crys_kspace)\n\nGet atomic charge density from tb_crys or tb_crys_kspace or crys + eden\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.get_dq-Tuple{TightlyBound.TB.tb_crys}","page":"Every Docstring","title":"TightlyBound.TB.get_dq","text":"function get_dq(tbc::tb_crys)\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.get_energy_electron_density_kspace-Tuple{TightlyBound.TB.tb_crys_kspace}","page":"Every Docstring","title":"TightlyBound.TB.get_energy_electron_density_kspace","text":"function get_energy_electron_density_kspace(tbcK::tb_crys_kspace; smearing = 0.01)\n\nGet energy / charge density from k-space tight binding object.\n\nreturn bandenergy + etypes + echarge + energy_smear, eden, VECTS, VALS, error_flag\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.get_energy_electron_density_kspace-Tuple{TightlyBound.TB.tb_k,Any}","page":"Every Docstring","title":"TightlyBound.TB.get_energy_electron_density_kspace","text":"function get_energy_electron_density_kspace(tb_k::tb_k, nelec; smearing = 0.01)\n\nK-space get energy and electron density from tb_k\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.get_h1-Tuple{TightlyBound.TB.tb_crys,Array{Float64,1}}","page":"Every Docstring","title":"TightlyBound.TB.get_h1","text":"function get_h1(tbc::tb_crys, chargeden::Array{Float64,1})\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.get_h1-Tuple{TightlyBound.TB.tb_crys_kspace,Array{Float64,1}}","page":"Every Docstring","title":"TightlyBound.TB.get_h1","text":"function get_h1(tbc::tb_crys_kspace, chargeden::Array{Float64,1})\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.get_h1-Tuple{TightlyBound.TB.tb_crys_kspace}","page":"Every Docstring","title":"TightlyBound.TB.get_h1","text":"function get_h1(tbc::tb_crys_kspace)\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.get_h1-Tuple{TightlyBound.TB.tb_crys}","page":"Every Docstring","title":"TightlyBound.TB.get_h1","text":"function get_h1(tbc::tb_crys)\n\nGet H1, the potential term added to tight binding in SCF calculation.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.get_kpath","page":"Every Docstring","title":"TightlyBound.TB.get_kpath","text":"function get_kpath(kpath=[0.5 0 0 ; 0 0 0; 0.5 0.5 0.5], names = missing, npts=30)\n\nConstruct a k_path for a band structure calculations. Very simple.\n\nkpath high symmetry k-points in fractional BZ coordinates.\nnames names of kpoints like [\"Γ\", \"X\"]\nnpts number of points between high-symmetry kpoints\n\n\n\n\n\n","category":"function"},{"location":"every/#TightlyBound.TB.get_neutral_eden","page":"Every Docstring","title":"TightlyBound.TB.get_neutral_eden","text":"function get_neutral_eden(crys::crystal, nwan=missing)\n\n\n\n\n\n","category":"function"},{"location":"every/#TightlyBound.TB.get_neutral_eden-Tuple{TightlyBound.TB.tb_crys}","page":"Every Docstring","title":"TightlyBound.TB.get_neutral_eden","text":"function get_neutral_eden(tbc::tb_crys)\n\nGets a neutral charge density (no charge transfer) to start SCF calculation.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.get_sym_R","page":"Every Docstring","title":"TightlyBound.TB.get_sym_R","text":"function get_sym_R(crys, grid, sss = 1.0)\n\nFigures out the r-space grid using Wigner-Seitz like construction to figure out the best arrangement of r-grid points to keep periodic copies closest to the original atom  and take into account symmetry.\n\nreturn R_grid, R_int_grid, sym_R\n\nreturns the R_grid, the integer version, and the symmetry factor of each point.\n\n\n\n\n\n","category":"function"},{"location":"every/#TightlyBound.TB.load_hr_dat","page":"Every Docstring","title":"TightlyBound.TB.load_hr_dat","text":"function load_hr_dat(filename, directory=\"\")\n\nLoad a wannier90 hr.dat file Not curretnly a major part of program, but you can use if you want.\n\n\n\n\n\n","category":"function"},{"location":"every/#TightlyBound.TB.make_kgrid-Tuple{Any}","page":"Every Docstring","title":"TightlyBound.TB.make_kgrid","text":"function make_kgrid(kgrid)\n\n-kgrid is an array of 3 integers like [8,8,8] \n\nreturns regular zero-centered k-point grid and (equal) k-weights.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.make_tb-Tuple{Any,Any,Any}","page":"Every Docstring","title":"TightlyBound.TB.make_tb","text":"function make_tb(H, ind_arr, S; h1=missing)\n\nConstructor function for tb, better programming.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.make_tb-Tuple{Any,Any,Dict,Any}","page":"Every Docstring","title":"TightlyBound.TB.make_tb","text":"function make_tb(H, ind_arr, r_dict::Dict, S; h1=missing)\n\nConstructor function for tb with overlaps\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.make_tb-Tuple{Any,Any,Dict}","page":"Every Docstring","title":"TightlyBound.TB.make_tb","text":"function make_tb(H, ind_arr, r_dict::Dict; h1=missing)\n\nConstructor function for tb\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.make_tb_crys-Tuple{TightlyBound.TB.tb,TightlyBound.CrystalMod.crystal,Float64,Float64}","page":"Every Docstring","title":"TightlyBound.TB.make_tb_crys","text":"function make_tb_crys(ham::tb,crys::crystal, nelec::Float64, dftenergy::Float64; scf=false, eden = missing, gamma=missing, within_fit=true, screening=1.0, tb_energy=-999, fermi_energy=0.0 )\n\nConstructor function for tb_crys object\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.make_tb_crys_kspace-Tuple{TightlyBound.TB.tb_k,TightlyBound.CrystalMod.crystal,Float64,Float64}","page":"Every Docstring","title":"TightlyBound.TB.make_tb_crys_kspace","text":"function make_tb_crys_kspace(hamk::tb_k,crys::crystal, nelec::Float64, dftenergy::Float64; scf=false, eden = missing, gamma=missing, screening=1.0)\n\nConstructor function for tb_crys_kspace object\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.make_tb_k-NTuple{4,Any}","page":"Every Docstring","title":"TightlyBound.TB.make_tb_k","text":"function make_tb_k(Hk, K, kweights, Sk; h1=missing, grid=[0,0,0], nonorth=true)\n\nConstructor for tb_kspace\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.myfft","page":"Every Docstring","title":"TightlyBound.TB.myfft","text":"function myfft(crys, nonorth, grid, kpts,ham_kS, Sk=missing)\n\nDoes Fourier Transform K->R (ifft) using FFTW.\n\nArguments\n\ncrys crystal\nnonorth nonorogonal bool\ngrid k-point grid size\nkpts the k-points nkpts×3 in the original order, to be rearranged into grid\nham_kS hamiltonian in k space (nw×nw×nkpts)\nSk overlaps in k space\n\n\n\n\n\n","category":"function"},{"location":"every/#TightlyBound.TB.myfft_R_to_K","page":"Every Docstring","title":"TightlyBound.TB.myfft_R_to_K","text":"function myfft_R_to_K(tbc, grid=missing)\n\nDoes Fourier Transform R->k (fft) using FFTW for tb_crys\n\n\n\n\n\n","category":"function"},{"location":"every/#TightlyBound.TB.organizedata-Tuple{TightlyBound.CrystalMod.crystal,TightlyBound.TB.tb}","page":"Every Docstring","title":"TightlyBound.TB.organizedata","text":"function organizedata(crys::crystal, h::tb)\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.organizedata-Tuple{TightlyBound.TB.tb_crys}","page":"Every Docstring","title":"TightlyBound.TB.organizedata","text":"function organizedata(tbc::tb_crys)\n\nRearrange the data in the tbc as a function of distances for plotting purposes.\n\nreturn data_onsite, data_arr\n\nReturns two arrays. The first has data on the onsite elements.\n\ncolumn 1 and 3 have atom indexes\ncolumn 2 and 4 have orbital numbers\ncolumns 5 and 6 have real and imaginary parts of H\ncolumns 11 and 12 have real and imaginary parts of S\ncolumn 7 has the closest inter-atomic distance\ncolumn 8 has the index of the closest atom.\n\nThe second has intersite data\n\ncolumn 1 and 3 have atom indexes for the atom pairs\ncolumn 2 and 4 have orbital numbers\ncolumns 5 and 6 have real and imaginary parts of H\ncolumns 11 and 12 have real and imaginary parts of S\ncolumn 7 has the inter-atomic distance\ncolumn 8,9,10 have the the direction cosines lmn for the atom pair.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.plot_bandstr-Tuple{TightlyBound.TB.tb_crys}","page":"Every Docstring","title":"TightlyBound.TB.plot_bandstr","text":"function plot_bandstr(h::tb_crys; kpath, names = missing, proj_types=missing, proj_orbs = missing, proj_nums=missing)\n\nPlot the band structure of a tb_crys object. Can also perform a projected band structure if you specify at least one of proj_types, proj_orbs, proj_nums.\n\nk-path specified by a kpath array and names.\n\nArguments\n\nh::tb_crys - The tight-biding object we want to plot bands from. Only required argument.\nkpath=[0.5 0 0 ; 0 0 0; 0.5 0.5 0.5; 0 0.5 0.5; 0 0 0 ;0 0 0.5] - nk × 3 array k-point path (high symmetry points).\nnpts=30, - number of points between high-symmetry k-points.\nnames=missing - nk string array. Names of the high-symmetry k-points \nproj_types=missing - types to project onto. Either proj_types=\"H\" or proj_types=[\"H\", \"O\"] are valid.\nproj_orbs=missing - orbitals to project onto. either proj_orbs=:s or proj_orbs=[:s, :p].\nproj_nums=missing - atom numbers to project onto. Either proj_nums=1 or proj_nums=[1, 2]\nefermi=missing - allows you to specify fermi energy. Default is to take from h\ncolor=\"blue\" - specify line color\nMarkerSize=missing\" - specify markersize\nyrange=missing\" - specify y-range. e.g. yrange=[-0.7, 0.3]\nplot_hk=false - plot things besides the normal band structure. Can be one of :Seig, :Heig, :Hreal, :Himag, :Sreal, :Simag to plot H or S eigvals or components. Primarily for debugging.\nalign=\"vbm\" - default or \"valence\" is to align valence band max to zero energy. Can also be \"min\", which aligns on the minimum eigenvalue, or \"fermi\" or \"ef\", which align on the Fermi level, \nclear_pervious=true - clears the plot before adding new stuff.\ndo_display=true - display the plot. If false, can be used with display-less nodes. You can still use savefig from Plots to produce saved images.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.plot_bandstr-Tuple{TightlyBound.TB.tb}","page":"Every Docstring","title":"TightlyBound.TB.plot_bandstr","text":"function plot_bandstr(h::tb)\n\nPlots using tb\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.plot_compare_dft-Tuple{TightlyBound.TB.tb_crys,Any}","page":"Every Docstring","title":"TightlyBound.TB.plot_compare_dft","text":"function plot_compare_dft(tbc::tb_crys, bs; tbc2=missing)\n\nPlots a band structure comparison between a tight-binding crystal object (tb_crys) and a band structure directly from dft (either a dftout or bs object). \n\nThe k-points are fixed by the bs object.\n\ntbc2 is an optional second tbc_crys.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.plot_compare_tb-Tuple{TightlyBound.TB.tb,TightlyBound.TB.tb}","page":"Every Docstring","title":"TightlyBound.TB.plot_compare_tb","text":"function plot_compare_tb(h1::tb, h2::tb; h3=missing)\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.plot_compare_tb-Tuple{TightlyBound.TB.tb_crys,TightlyBound.TB.tb_crys}","page":"Every Docstring","title":"TightlyBound.TB.plot_compare_tb","text":"function plot_compare_tb(h1::tb_crys, h2::tb_crys; h3=missing)\n\nPlot a comparison between different tight binding objects h1, h2, and optionally h3. Options similar to plot_bandstr but more limited.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.read_tb_crys-Tuple{Any}","page":"Every Docstring","title":"TightlyBound.TB.read_tb_crys","text":"function read_tb_crys(filename, tbc::tb_crys)\n\nReads and returns from filename a tb_crys object. See write_tb_crys\n\nIf cannot find \"filename\", will look for \"filename.xml\", \"filename.gz\", \"filename.xml.gz\"\n\nCan read gzipped files directly.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.read_tb_crys_kspace-Tuple{Any}","page":"Every Docstring","title":"TightlyBound.TB.read_tb_crys_kspace","text":"function read_tb_crys_kspace(filename; directory=missing)\n\nReads and returns from filename a tb_crys_kspace object. See write_tb_crys_kspace\n\nIf cannot find \"filename\", will look for \"filename.xml\", \"filename.gz\", \"filename.xml.gz\"\n\nCan read gzipped files directly.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.renormalize_tb-Tuple{dftout,TightlyBound.TB.tb}","page":"Every Docstring","title":"TightlyBound.TB.renormalize_tb","text":"function renormalize_tb(d::dftout, h::tb)\n\nShift eigenvalues from DFT calculation so that the band energy matches the DFT total energy.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.summarize_orb-Tuple{Symbol}","page":"Every Docstring","title":"TightlyBound.TB.summarize_orb","text":"function summarize_orb(orb::Symbol)\n\nConvert exact orbital (:px) to type of orbital :p .\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.symm_by_orbitals-Tuple{TightlyBound.CrystalMod.crystal,Any}","page":"Every Docstring","title":"TightlyBound.TB.symm_by_orbitals","text":"function symm_by_orbitals(crys::crystal, mat)\n\nHelper function to re-symmeterize the overlap matrix properly, starting from incomplete k-points.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.tb_indexes-Tuple{dftout}","page":"Every Docstring","title":"TightlyBound.TB.tb_indexes","text":"function tb_indexes(d::dftout)\n\nFigures out mapping between DFT projected hamiltonian orbitals and crystal and the wannier orbitals we want.\n\nreturn wan, semicore, nwan, nsemi, wan_atom, atom_wan\n\nwan has the indexes of the wannier orbitals\nsemicore has the indexes of semicore states.\nnwan number of wannier orbs\nnsemi number of semicore states\nwan_atom dictionary wannier to atom numbers\natom_wan dictionary atom numbers to wannier orbitals\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.trim","page":"Every Docstring","title":"TightlyBound.TB.trim","text":"function trim(h::tb, tol=0.0002)\n\nRemove terms in tb with abs value smaller than tol. (Ryd) Will speed calculations at cost of accuracy. USE WITH CARE. Usually not necessary except for very large or very detailed calculations.\n\n\n\n\n\n","category":"function"},{"location":"every/#TightlyBound.TB.types_energy-Tuple{Any}","page":"Every Docstring","title":"TightlyBound.TB.types_energy","text":"function types_energy(types)\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.types_energy-Tuple{TightlyBound.CrystalMod.crystal}","page":"Every Docstring","title":"TightlyBound.TB.types_energy","text":"function types_energy(c::crystal)\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.types_energy-Tuple{TightlyBound.TB.tb_crys_kspace}","page":"Every Docstring","title":"TightlyBound.TB.types_energy","text":"function types_energy(tbc::tb_crys)\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.types_energy-Tuple{TightlyBound.TB.tb_crys}","page":"Every Docstring","title":"TightlyBound.TB.types_energy","text":"function types_energy(tbc::tb_crys)\n\nCalculate the reference energy of each atom in crystal. This results in the  total energy being indexed to seperated non-spin-polarized atoms. This is arbirary.\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.write_tb_crys-Tuple{Any,TightlyBound.TB.tb_crys}","page":"Every Docstring","title":"TightlyBound.TB.write_tb_crys","text":"function write_tb_crys(filename, tbc::tb_crys)\n\nWrites to filename a tb_crys object, using xml formatting. See read_tb_crys\n\n\n\n\n\n","category":"method"},{"location":"every/#TightlyBound.TB.write_tb_crys_kspace-Tuple{Any,TightlyBound.TB.tb_crys_kspace}","page":"Every Docstring","title":"TightlyBound.TB.write_tb_crys_kspace","text":"function write_tb_crys_kspace(filename, tbc::tb_crys_kspace)\n\nSave a tb_crys_kspace object to xml format. See read_tb_crys_kspace\n\n\n\n\n\n","category":"method"},{"location":"core/#User-Functions","page":"Functions","title":"User Functions","text":"","category":"section"},{"location":"core/","page":"Functions","title":"Functions","text":"All of these functions are exported from TightlyBound for your convenience.","category":"page"},{"location":"core/#Crystal-/-Energy","page":"Functions","title":"Crystal / Energy","text":"","category":"section"},{"location":"core/","page":"Functions","title":"Functions","text":"makecrys\nscf_energy\nscf_energy_force_stress\nrelax_structure\nread_tb_crys\nwrite_tb_crys","category":"page"},{"location":"core/#TightlyBound.CrystalMod.makecrys","page":"Functions","title":"TightlyBound.CrystalMod.makecrys","text":"makecrys(A,coords,types)\n\nReturn a crystal object from 3×3 lattice A (Bohr), nat × 3 coords in crystal units, and nat element strings\n\nNote: also export-ed directly from TightlyBound for convenience\n\njulia> makecrys([10.0 0 0; 0 10.0 0; 0 0 10.0], [0.0 0.0 0.0], [\"H\"])\nA1=     10.00000  0.00000  0.00000\nA2=     0.00000  10.00000  0.00000\nA3=     0.00000  0.00000  10.00000\n\nH    0.00000  0.00000  0.00000\n\n\n\n\n\nmakecrys(filename::String)\n\nRead filename, return crystal object. File can be POSCAR, or simple quantum espresso inputfile\n\n\n\n\n\nmakecrys(lines::Array{String,1})\n\nRead string array, return crystal object. string array can be POSCAR, or simple quantum espresso inputfile\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.scf_energy","page":"Functions","title":"TightlyBound.scf_energy","text":"scf_energy(c::crystal)\n\nCalculate energy, force, and stress for a crystal. Does self-consistent-field (SCF) calculation if using self-consistent electrostatics.\n\nreturns energy, tight-binding-crystal-object, error-flag\n\nArguments\n\nc::crystal: the structure to calculate on. Only required argument.\ndatabase=missing: Source of coeficients. Will be loaded from pre-fit coefficients if missing.\nsmearing=0.01: Gaussian smearing temperature, in Ryd. Usually can leave as default.\ngrid=missing: k-point grid, e.g. [10,10,10], default chosen automatically\nconv_thr = 1e-5: SCF convergence threshold (Ryd).\niter = 75: number of iterations before switch to more conservative settings.\nmix = -1.0: initial mixing. -1.0 means use default mixing. Will automagically adjust mixing if SCF is failing to converge.\nmixing_mode =:pulay: default is Pulay mixing (DIIS). Other option is :simple, for simple linear mixing of old and new electron-density. Will automatically switch to simple if Pulay fails.\n\n\n\n\n\nscf_energy(d::dftout)\n\nSCF energy using crystal structure from DFT object.\n\n\n\n\n\nscf_energy(tbc::tbc_crys)\n\nSCF energy using crystal structure from TBC object.\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.scf_energy_force_stress","page":"Functions","title":"TightlyBound.scf_energy_force_stress","text":"scf_energy_force_stress(c::crystal; database = missing, smearing = 0.01, grid = missing)\n\nCalculate energy, force, and stress for a crystal.\n\nreturns energy, force, stress, tightbindingcrystal_object\n\nArguments\n\nc::crystal: the structure to calculate on. Only required argument.\ndatabase=missing: Source of coeficients. Will be loaded from pre-fit coefficients if missing.\nsmearing=0.01: Gaussian smearing temperature, in Ryd. Usually can leave as default.\ngrid=missing: k-point grid, e.g. [10,10,10], default chosen automatically\n\n\n\n\n\nscf_energy_force_stress(tbc::tb_crys; database = missing, smearing = 0.01, grid = missing)\n\nCalculate energy, force, and stress for a tight binding crystal object. This allows the calculation to run without re-doing the SCF calculation. Assumes SCF already done!\n\nreturns energy, force, stress, tightbindingcrystal_object\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.relax_structure","page":"Functions","title":"TightlyBound.relax_structure","text":"relax_structure(c::crystal; mode=\"vc-relax\")\n\nFind the lowest energy atomic configuration of crystal c.\n\nArguments\n\nc::crystal: the structure to relax, only required argument\nmode=\"vc-relax\": Default (variable-cell relax) will relax structure and cell, anything else will relax structure only.\ndatabase=missing: coefficent database, default is to use the pre-fit pbesol database\nsmearing=0.01: smearing temperature (ryd), default = 0.01\ngrid=missing: k-point grid, e.g. [10,10,10], default chosen automatically\nnsteps=100: maximum iterations\nupdate_grid=true: update automatic k-point grid during relaxation\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.TB.read_tb_crys","page":"Functions","title":"TightlyBound.TB.read_tb_crys","text":"function read_tb_crys(filename, tbc::tb_crys)\n\nReads and returns from filename a tb_crys object. See write_tb_crys\n\nIf cannot find \"filename\", will look for \"filename.xml\", \"filename.gz\", \"filename.xml.gz\"\n\nCan read gzipped files directly.\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.TB.write_tb_crys","page":"Functions","title":"TightlyBound.TB.write_tb_crys","text":"function write_tb_crys(filename, tbc::tb_crys)\n\nWrites to filename a tb_crys object, using xml formatting. See read_tb_crys\n\n\n\n\n\n","category":"function"},{"location":"core/#Plotting","page":"Functions","title":"Plotting","text":"","category":"section"},{"location":"core/","page":"Functions","title":"Functions","text":"plot_bandstr\nplot_compare_dft\nplot_compare_tb","category":"page"},{"location":"core/#TightlyBound.TB.plot_bandstr","page":"Functions","title":"TightlyBound.TB.plot_bandstr","text":"function plot_bandstr(h::tb_crys; kpath, names = missing, proj_types=missing, proj_orbs = missing, proj_nums=missing)\n\nPlot the band structure of a tb_crys object. Can also perform a projected band structure if you specify at least one of proj_types, proj_orbs, proj_nums.\n\nk-path specified by a kpath array and names.\n\nArguments\n\nh::tb_crys - The tight-biding object we want to plot bands from. Only required argument.\nkpath=[0.5 0 0 ; 0 0 0; 0.5 0.5 0.5; 0 0.5 0.5; 0 0 0 ;0 0 0.5] - nk × 3 array k-point path (high symmetry points).\nnpts=30, - number of points between high-symmetry k-points.\nnames=missing - nk string array. Names of the high-symmetry k-points \nproj_types=missing - types to project onto. Either proj_types=\"H\" or proj_types=[\"H\", \"O\"] are valid.\nproj_orbs=missing - orbitals to project onto. either proj_orbs=:s or proj_orbs=[:s, :p].\nproj_nums=missing - atom numbers to project onto. Either proj_nums=1 or proj_nums=[1, 2]\nefermi=missing - allows you to specify fermi energy. Default is to take from h\ncolor=\"blue\" - specify line color\nMarkerSize=missing\" - specify markersize\nyrange=missing\" - specify y-range. e.g. yrange=[-0.7, 0.3]\nplot_hk=false - plot things besides the normal band structure. Can be one of :Seig, :Heig, :Hreal, :Himag, :Sreal, :Simag to plot H or S eigvals or components. Primarily for debugging.\nalign=\"vbm\" - default or \"valence\" is to align valence band max to zero energy. Can also be \"min\", which aligns on the minimum eigenvalue, or \"fermi\" or \"ef\", which align on the Fermi level, \nclear_pervious=true - clears the plot before adding new stuff.\ndo_display=true - display the plot. If false, can be used with display-less nodes. You can still use savefig from Plots to produce saved images.\n\n\n\n\n\nfunction plot_bandstr(h::tb)\n\nPlots using tb\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.TB.plot_compare_dft","page":"Functions","title":"TightlyBound.TB.plot_compare_dft","text":"function plot_compare_dft(tbc::tb_crys, bs; tbc2=missing)\n\nPlots a band structure comparison between a tight-binding crystal object (tb_crys) and a band structure directly from dft (either a dftout or bs object). \n\nThe k-points are fixed by the bs object.\n\ntbc2 is an optional second tbc_crys.\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.TB.plot_compare_tb","page":"Functions","title":"TightlyBound.TB.plot_compare_tb","text":"function plot_compare_tb(h1::tb_crys, h2::tb_crys; h3=missing)\n\nPlot a comparison between different tight binding objects h1, h2, and optionally h3. Options similar to plot_bandstr but more limited.\n\n\n\n\n\nfunction plot_compare_tb(h1::tb, h2::tb; h3=missing)\n\n\n\n\n\n","category":"function"},{"location":"core/#Utility","page":"Functions","title":"Utility","text":"","category":"section"},{"location":"core/","page":"Functions","title":"Functions","text":"Hk\ncalc_bands\ncalc_tb_fast","category":"page"},{"location":"core/#TightlyBound.TB.Hk","page":"Functions","title":"TightlyBound.TB.Hk","text":"function Hk(h::tb_crys_kspace, kpoint)\n\nCalculate band structure at a k-point from a tb_crys_kspace object. Note, can only return precalculated k-points. Need real-space version to get arbitrary k-points.\n\n#Returns\n\nvect - Eigenvectors numwan × numwan complex matrix at kpoint\nvals - Eigenvalues (num_wan)\nhk - Hamiltonian at kpoint\nsk - Overlap matrix at kpoint\nvals0 - <vect | Hk0 | vect> where Hk0 is the non-scf part of the Hamiltonian.\n\n#Arguments\n\nh::tb_crys_kspace - tbcryskspace object\nkpoint - e.g. [0.0,0.0,0.0]\nscf=missing - default is to take SCF from h.\n\n\n\n\n\nfunction Hk(h::tb_k, kpoint)\n\nCalculate band structure at a k-point from tb_k. Must be pre-calculated k-point.\n\n\n\n\n\nfunction Hk(hk,sk, h::tb, kpoint)\n\nHk function with pre-allocated memory hk, sk\n\n\n\n\n\nfunction Hk(h::tb, kpoint)\n\nCalculate band structure at a k-point from tb\n\n\n\n\n\nfunction Hk(h::tb_crys, kpoint)\n\nCalculate band structure at a k-point from tb_crys\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.TB.calc_bands","page":"Functions","title":"TightlyBound.TB.calc_bands","text":"function calc_bands(tbc::tb_crys, kpoints::Array{Float64,2})\n\nCalculate bandstructure for k-points from k-point array. Returns eigenvalues.\n\nArguments\n\ntbc::tb_crys - The tight binding object\nkpoints::Array{Float64,2} - k-point array. e.g. [0.0 0.0 0.0; 0.0 0.0 0.1]\n\n\n\n\n\nfunction calc_bands(h, kpoints::Array{Float64,2})\n\nCalculate bandstructure for k-points from k-point array. h is a tb or tb_k object.\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.CalcTB.calc_tb_fast","page":"Functions","title":"TightlyBound.CalcTB.calc_tb_fast","text":"calc_tb_fast(crys::crystal; database=missing, use_threebody=true, use_threebody_onsite=true)\n\nConstruct tb_crys from crystal stucture, but does not solve. This is usually called internally by functions like scf_energy, but you can use it directly if you want. Until you do a SCF energy calculation, the electron density and Fermi level will be wrong.\n\nArguments\n\ncrys::crystal - Required crystal structure\ndatabase=missing - Source of coefficients. Will load from default source if not specified.\nuse_threebody=true - Use three-body off-site interactions. Only turn off for testing purposes.\nuse_threebody_onsite=true - Use three-body on-site interactions. Only turn off for testing purposes.\n'verbose=true` - set to false for less output.\n'vartype=missing- variable type oftbcrys. Default isFloat64`.\n\n\n\n\n\n","category":"function"},{"location":"theindex/#Index","page":"-","title":"Index","text":"","category":"section"},{"location":"theindex/","page":"-","title":"-","text":"","category":"page"},{"location":"structs/#Core-User-Data-(structs)","page":"Structs","title":"Core User Data (structs)","text":"","category":"section"},{"location":"structs/","page":"Structs","title":"Structs","text":"TightlyBound.CrystalMod.crystal\nTightlyBound.TB.tb\nTightlyBound.TB.tb_crys\nTightlyBound.TB.tb_k\nTightlyBound.TB.tb_crys_kspace","category":"page"},{"location":"structs/#TightlyBound.CrystalMod.crystal","page":"Structs","title":"TightlyBound.CrystalMod.crystal","text":"mutable struct crystal{T}\n\nHolds basic crystal structure information, type T. Use makecrys to easily construct.\n\nNote: you can create supercells like\n\njulia> c = makecrys([5.0 0 0; 0 5.0 0; 0 0 5.0], [0.0 0.0 0.0], [\"H\"])\nA1=     5.00000  0.00000  0.00000\nA2=     0.00000  5.00000  0.00000\nA3=     0.00000  0.00000  5.00000\n\nH    0.00000  0.00000  0.00000\n\n\njulia> c*[2,2,2]\nA1=     10.00000  0.00000  0.00000\nA2=     0.00000  10.00000  0.00000\nA3=     0.00000  0.00000  10.00000\n\nH    0.00000  0.00000  0.00000\nH    0.00000  0.00000  0.50000\nH    0.00000  0.50000  0.00000\nH    0.00000  0.50000  0.50000\nH    0.50000  0.00000  0.00000\nH    0.50000  0.00000  0.50000\nH    0.50000  0.50000  0.00000\nH    0.50000  0.50000  0.50000\n\nHolds\n\nA::Array{T,2} 3 × 3 lattice vectors, Bohr (atomic units) internally.\ncoords::Array{T,2} num_atoms × 3  atomic positions, fractional units.\ntypes::Array{String,1} atomic names, like \"H\" or \"Zn\".\ntypes::Array{Symbol,1} atomic names, but julia Symbols like :H or :Zn, for nominally faster internal evaluation.\nnat::Int64 number of atoms.\n\n\n\n\n\n","category":"type"},{"location":"ug_run/#Running-tight-binding-calculations","page":"Running Calculations","title":"Running tight-binding calculations","text":"","category":"section"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"How to run tight-binding calculations using the pre-fit tight-binding coefficients. Note, only elemental and binary systems are currently supported.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"note: Note\nRunning a julia function for the first time will compile the function. Future runs will be much faster.","category":"page"},{"location":"ug_run/#**Create-a-crystal-object**","page":"Running Calculations","title":"Create a crystal object","text":"","category":"section"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Consists of lattice vectors, atomic positions, and atom types. Current units are Bohr only, this will change.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"using TightlyBound\nA = [4.0 4.0 0.0;4.0 0.0 4.0;0.0 4.0 4.0];\npos = [0.0 0.0 0.0];\ntypes =        [\"Al\"];\nfcc_al = makecrys(A, pos, types)","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Alternatively, you can read the positions from a simple POSCAR or Quantum Espresso input file.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"rbcl = makecrys(\"../src/POSCAR_rbcl\")","category":"page"},{"location":"ug_run/#**Do-an-self-consistent-calculation.**","page":"Running Calculations","title":"Do an self-consistent calculation.","text":"","category":"section"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Gets the energy and charge density.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"alp = makecrys(\"../src/POSCAR_alp\")\nenergy, tbc_alp = scf_energy(alp); \nprintln(\"The energy is $energy Ryd\")","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"This returns the non-magnetic atomization energy, and a tight-binding object with the SCF electron density calculated.","category":"page"},{"location":"ug_run/#**Plot-the-band-structure.**","page":"Running Calculations","title":"Plot the band structure.","text":"","category":"section"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Using the tight-binding object from above. Note: SCF must be done first to get meaningful results.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"using Plots #hide\ngr() #hide\nENV[\"GKSwstype\"] = \"100\" #hide\nplot_bandstr(tbc_alp, do_display=false); \nsavefig(\"alp.png\"); #hide","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"(Image: AlP plot)","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Use do_display=true to produce an interactive plot.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"The default just picks some random kpoints, but you can add your own kpath. We also project onto the s orbital of Al.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"kpath=[0.0 0.0 0.0; 0.5 0.5 0.5; 0.0 0.5 0.5];\nknames=[\"Γ\", \"X\", \"V\"];\nplot_bandstr(tbc_alp, kpath=kpath, names=knames, npts=100, proj_orbs=[:s], proj_types=[\"Al\"], do_display=false);\nsavefig(\"alp2.png\"); #hide","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"(Image: AlP plot)","category":"page"},{"location":"ug_run/#**Calculate-force-/-stress**","page":"Running Calculations","title":"Calculate force / stress","text":"","category":"section"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"energy, force, stress, tbc = scf_energy_force_stress(tbc_alp);\n\nprintln(\"energy $energy\")\nprintln()\nprintln(\"Forces\")\nshow(stdout, \"text/plain\", force)\nprintln()\nprintln(\"Stress\")\nshow(stdout, \"text/plain\", stress)\nnothing #hide","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Can also be called directly on a new crystal structure instead of a tb_crys object.","category":"page"},{"location":"ug_run/#**Relax-structure**","page":"Running Calculations","title":"Relax structure","text":"","category":"section"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"crys_new, tbc_updated, energy, force, stress = relax_structure(alp);\n\nprintln(\"Energy new $energy\")\nprintln()\nprintln(\"Force\")\nshow(stdout, \"text/plain\", force)\nprintln()\nprintln(\"Stress\")\nshow(stdout, \"text/plain\", stress)\nnothing #hide","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Energy is lower, stress is near zero, forces are zero by symmetry in Zinc Blende structure.","category":"page"},{"location":"#TightlyBound.jl-Documentation","page":"Home","title":"TightlyBound.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A three-body tight binding program written in Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"Primary Author: Kevin F. Garrity, NIST","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThis package currently barely works. Needs much more testing.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Run tight-binding calculations with near DFT level accuracy (PBEsol).\nGet results in seconds based on pre-fit parameters from across periodic table.\nCalculate band structures and total energies.\nGet forces, stresses, and relax structures.\nParameters based on two- and three-body interactions.\nIncludes self-consistent treatment of long-range Coulomb interaction.\nPlotting based on interface of Plots.jl","category":"page"},{"location":"#Outline","page":"Home","title":"Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stuff\nOther stuff","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"ug_fit/#Fitting-tight-binding-coefficients-from-Quantum-Espresso.","page":"Fit Coefficients","title":"Fitting tight-binding coefficients from Quantum Espresso.","text":"","category":"section"},{"location":"ug_fit/","page":"Fit Coefficients","title":"Fit Coefficients","text":"to add later...","category":"page"}]
}
