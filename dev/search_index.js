var documenterSearchIndex = {"docs":
[{"location":"core/#User-Functions","page":"Functions","title":"User Functions","text":"","category":"section"},{"location":"core/","page":"Functions","title":"Functions","text":"All of these functions are exported from TightlyBound for your convenience.","category":"page"},{"location":"core/#Crystal-/-Energy","page":"Functions","title":"Crystal / Energy","text":"","category":"section"},{"location":"core/","page":"Functions","title":"Functions","text":"makecrys\nscf_energy\nscf_energy_force_stress\nrelax_structure\nread_tb_crys\nwrite_tb_crys","category":"page"},{"location":"core/#TightlyBound.CrystalMod.makecrys","page":"Functions","title":"TightlyBound.CrystalMod.makecrys","text":"makecrys(A,coords,types)\n\nReturn a crystal object from 3×3 lattice A (Bohr), nat × 3 coords in crystal units, and nat element strings\n\nNote: also export-ed directly from TightlyBound for convenience\n\njulia> makecrys([10.0 0 0; 0 10.0 0; 0 0 10.0], [0.0 0.0 0.0], [\"H\"])\nA1=     10.00000  0.00000  0.00000\nA2=     0.00000  10.00000  0.00000\nA3=     0.00000  0.00000  10.00000\n\nH    0.00000  0.00000  0.00000\n\n\n\n\n\nmakecrys(filename::String)\n\nRead filename, return crystal object. File can be POSCAR, or simple quantum espresso inputfile\n\n\n\n\n\nmakecrys(lines::Array{String,1})\n\nRead string array, return crystal object. string array can be POSCAR, or simple quantum espresso inputfile\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.scf_energy","page":"Functions","title":"TightlyBound.scf_energy","text":"scf_energy(c::crystal)\n\nCalculate energy, force, and stress for a crystal. Does self-consistent-field (SCF) calculation if using self-consistent electrostatics.\n\nreturns energy, tight-binding-crystal-object, error-flag\n\nArguments\n\nc::crystal: the structure to calculate on. Only required argument.\ndatabase=missing: Source of coeficients. Will be loaded from pre-fit coefficients if missing.\nsmearing=0.01: Gaussian smearing temperature, in Ryd. Usually can leave as default.\ngrid=missing: k-point grid, e.g. [10,10,10], default chosen automatically\nconv_thr = 1e-5: SCF convergence threshold (Ryd).\niter = 75: number of iterations before switch to more conservative settings.\nmix = -1.0: initial mixing. -1.0 means use default mixing. Will automagically adjust mixing if SCF is failing to converge.\nmixing_mode =:pulay: default is Pulay mixing (DIIS). Other option is :simple, for simple linear mixing of old and new electron-density. Will automatically switch to simple if Pulay fails.\n\n\n\n\n\nscf_energy(d::dftout)\n\nSCF energy using crystal structure from DFT object.\n\n\n\n\n\nscf_energy(tbc::tbc_crys)\n\nSCF energy using crystal structure from TBC object.\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.scf_energy_force_stress","page":"Functions","title":"TightlyBound.scf_energy_force_stress","text":"scf_energy_force_stress(c::crystal; database = missing, smearing = 0.01, grid = missing)\n\nCalculate energy, force, and stress for a crystal.\n\nreturns energy, force, stress, tightbindingcrystal_object\n\nArguments\n\nc::crystal: the structure to calculate on. Only required argument.\ndatabase=missing: Source of coeficients. Will be loaded from pre-fit coefficients if missing.\nsmearing=0.01: Gaussian smearing temperature, in Ryd. Usually can leave as default.\ngrid=missing: k-point grid, e.g. [10,10,10], default chosen automatically\n\n\n\n\n\nscf_energy_force_stress(tbc::tb_crys; database = missing, smearing = 0.01, grid = missing)\n\nCalculate energy, force, and stress for a tight binding crystal object. This allows the calculation to run without re-doing the SCF calculation. Assumes SCF already done!\n\nreturns energy, force, stress, tightbindingcrystal_object\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.relax_structure","page":"Functions","title":"TightlyBound.relax_structure","text":"relax_structure(c::crystal; mode=\"vc-relax\")\n\nFind the lowest energy atomic configuration of crystal c.\n\nArguments\n\nc::crystal: the structure to relax, only required argument\nmode=\"vc-relax\": Default (variable-cell relax) will relax structure and cell, anything else will relax structure only.\ndatabase=missing: coefficent database, default is to use the pre-fit pbesol database\nsmearing=0.01: smearing temperature (ryd), default = 0.01\ngrid=missing: k-point grid, e.g. [10,10,10], default chosen automatically\nnsteps=100: maximum iterations\nupdate_grid=true: update automatic k-point grid during relaxation\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.TB.read_tb_crys","page":"Functions","title":"TightlyBound.TB.read_tb_crys","text":"read_tb_crys(filename, tbc::tb_crys)\n\nReads and returns from filename a tb_crys object. See write_tb_crys\n\nIf cannot find \"filename\", will look for \"filename.xml\", \"filename.gz\", \"filename.xml.gz\"\n\nCan read gzipped files directly.\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.TB.write_tb_crys","page":"Functions","title":"TightlyBound.TB.write_tb_crys","text":"write_tb_crys(filename, tbc::tb_crys)\n\nWrites to filename a tb_crys object, using xml formatting. See read_tb_crys\n\n\n\n\n\n","category":"function"},{"location":"core/#Plotting","page":"Functions","title":"Plotting","text":"","category":"section"},{"location":"core/","page":"Functions","title":"Functions","text":"plot_bandstr\nplot_compare_dft\nplot_compare_tb","category":"page"},{"location":"core/#TightlyBound.TB.plot_bandstr","page":"Functions","title":"TightlyBound.TB.plot_bandstr","text":"plot_bandstr(h::tb_crys; kpath, names = missing, proj_types=missing, proj_orbs = missing, proj_nums=missing)\n\nPlot the band structure of a tb_crys object. Can also perform a projected band structure if you specify at least one of proj_types, proj_orbs, proj_nums.\n\nk-path specified by a kpath array and names.\n\nArguments\n\nh::tb_crys - The tight-biding object we want to plot bands from. Only required argument.\nkpath=[0.5 0 0 ; 0 0 0; 0.5 0.5 0.5; 0 0.5 0.5; 0 0 0 ;0 0 0.5] - nk × 3 array k-point path (high symmetry points).\nnpts=30, - number of points between high-symmetry k-points.\nnames=missing - nk string array. Names of the high-symmetry k-points \nproj_types=missing - types to project onto. Either proj_types=\"H\" or proj_types=[\"H\", \"O\"] are valid.\nproj_orbs=missing - orbitals to project onto. either proj_orbs=:s or proj_orbs=[:s, :p].\nproj_nums=missing - atom numbers to project onto. Either proj_nums=1 or proj_nums=[1, 2]\nefermi=missing - allows you to specify fermi energy. Default is to take from h\ncolor=\"blue\" - specify line color\nMarkerSize=missing\" - specify markersize\nyrange=missing\" - specify y-range. e.g. yrange=[-0.7, 0.3]\nplot_hk=false - plot things besides the normal band structure. Can be one of :Seig, :Heig, :Hreal, :Himag, :Sreal, :Simag to plot H or S eigvals or components. Primarily for debugging.\nalign=\"vbm\" - default or \"valence\" is to align valence band max to zero energy. Can also be \"min\", which aligns on the minimum eigenvalue, or \"fermi\" or \"ef\", which align on the Fermi level, \nclear_pervious=true - clears the plot before adding new stuff.\ndo_display=true - display the plot. If false, can be used with display-less nodes. You can still use savefig from Plots to produce saved images.\n\n\n\n\n\nplot_bandstr(h::tb)\n\nPlots using tb\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.TB.plot_compare_dft","page":"Functions","title":"TightlyBound.TB.plot_compare_dft","text":"plot_compare_dft(tbc::tb_crys, bs; tbc2=missing)\n\nPlots a band structure comparison between a tight-binding crystal object (tb_crys) and a band structure directly from dft (either a dftout or bs object). \n\nThe k-points are fixed by the bs object.\n\ntbc2 is an optional second tbc_crys.\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.TB.plot_compare_tb","page":"Functions","title":"TightlyBound.TB.plot_compare_tb","text":"plot_compare_tb(h1::tb_crys, h2::tb_crys; h3=missing)\n\nPlot a comparison between different tight binding objects h1, h2, and optionally h3. Options similar to plot_bandstr but more limited.\n\n\n\n\n\nplot_compare_tb(h1::tb, h2::tb; h3=missing)\n\n\n\n\n\n","category":"function"},{"location":"core/#Utility","page":"Functions","title":"Utility","text":"","category":"section"},{"location":"core/","page":"Functions","title":"Functions","text":"Hk\ncalc_bands\ncalc_tb_fast","category":"page"},{"location":"core/#TightlyBound.TB.Hk","page":"Functions","title":"TightlyBound.TB.Hk","text":"Hk(h::tb_crys_kspace, kpoint)\n\nCalculate band structure at a k-point from a tb_crys_kspace\n\n#Returns\n\nvect - Eigenvectors numwan × numwan complex matrix at kpoint\nvals - Eigenvalues (num_wan)\nhk - Hamiltonian at kpoint\nsk - Overlap matrix at kpoint\nvals0 - <vect | Hk0 | vect> where Hk0 is the non-scf part of the Hamiltonian.\n\n#Arguments\n\nh::tb_crys_kspace - tbcryskspace object\nkpoint - e.g. [0.0,0.0,0.0]\nscf=missing - default is to take SCF from h.\n\n\n\n\n\nHk(h::tb_k, kpoint)\n\nCalculate band structure at a k-point from tb_k.\n\n\n\n\n\nHk(h::tb, kpoint)\n\nCalculate band structure at a k-point from tb\n\n\n\n\n\nHk(h::tb_crys, kpoint)\n\nCalculate band structure at a k-point from tb_crys\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.TB.calc_bands","page":"Functions","title":"TightlyBound.TB.calc_bands","text":"calcbands(tbc::tbcrys, kpoints::Array{Float64,2})\n\nCalculate bandstructure for k-points from k-point array. Returns eigenvalues.\n\nArguments\n\ntbc::tb_crys - The tight binding object\nkpoints::Array{Float64,2} - k-point array. e.g. [0.0 0.0 0.0; 0.0 0.0 0.1]\n\n\n\n\n\ncalc_bands(h, kpoints::Array{Float64,2})\n\nCalculate bandstructure for k-points from k-point array. h is a tb or tb_k object.\n\n\n\n\n\n","category":"function"},{"location":"core/#TightlyBound.CalcTB.calc_tb_fast","page":"Functions","title":"TightlyBound.CalcTB.calc_tb_fast","text":"calc_tb_fast(crys::crystal; database=missing, use_threebody=true, use_threebody_onsite=true)\n\nConstruct tb_crys from crystal stucture, but does not solve. This is usually called internally by functions like scf_energy, but you can use it directly if you want. Until you do a SCF energy calculation, the electron density and Fermi level will be wrong.\n\nArguments\n\n-crys::crystal - Required crystal structure -database=missing - Source of coefficients. Will load from default source if not specified. -use_threebody=true - Use three-body off-site interactions. Only turn off for testing purposes. -use_threebody_onsite=true - Use three-body on-site interactions. Only turn off for testing purposes. -'verbose=true- set to false for less output. -'var_type=missing - variable type of tb_crys. Default is Float64.\n\n\n\n\n\n","category":"function"},{"location":"theindex/#Index","page":"-","title":"Index","text":"","category":"section"},{"location":"theindex/","page":"-","title":"-","text":"","category":"page"},{"location":"structs/#Core-User-Data-(structs)","page":"Structs","title":"Core User Data (structs)","text":"","category":"section"},{"location":"structs/","page":"Structs","title":"Structs","text":"TightlyBound.CrystalMod.crystal","category":"page"},{"location":"structs/#TightlyBound.CrystalMod.crystal","page":"Structs","title":"TightlyBound.CrystalMod.crystal","text":"mutable struct crystal{T}\n\nHolds basic crystal structure information, type T.\n\nHolds\n\nA::Array{T,2} 3 × 3 lattice vectors, Bohr (atomic units) internally.\ncoords::Array{T,2} num_atoms × 3  atomic positions, fractional units.\ntypes::Array{String,1} atomic names, like \"H\" or \"Zn\".\nnat::Int64 number of atoms.\n\n\n\n\n\n","category":"type"},{"location":"ug_run/#Running-tight-binding-calculations","page":"Running Calculations","title":"Running tight-binding calculations","text":"","category":"section"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"How to run tight-binding calculations using the pre-fit tight-binding coefficients. Note, only elemental and binary systems are currently supported.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"note: Note\nRunning a julia function for the first time will compile the function. Future runs will be much faster.","category":"page"},{"location":"ug_run/#**Create-a-crystal-object**","page":"Running Calculations","title":"Create a crystal object","text":"","category":"section"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Consists of lattice vectors, atomic positions, and atom types. Current units are Bohr only, this will change.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"using TightlyBound\nA = [4.0 4.0 0.0;4.0 0.0 4.0;0.0 4.0 4.0];\npos = [0.0 0.0 0.0];\ntypes =        [\"Al\"];\nfcc_al = makecrys(A, pos, types)","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Alternatively, you can read the positions from a simple POSCAR or Quantum Espresso input file.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"rbcl = makecrys(\"../src/POSCAR_rbcl\")","category":"page"},{"location":"ug_run/#**Do-an-self-consistent-calculation.**","page":"Running Calculations","title":"Do an self-consistent calculation.","text":"","category":"section"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Gets the energy and charge density.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"alp = makecrys(\"../src/POSCAR_alp\")\nenergy, tbc_alp = scf_energy(alp); \nprintln(\"The energy is $energy Ryd\")","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"This returns the non-magnetic atomization energy, and a tight-binding object with the SCF electron density calculated.","category":"page"},{"location":"ug_run/#**Plot-the-band-structure.**","page":"Running Calculations","title":"Plot the band structure.","text":"","category":"section"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Using the tight-binding object from above. Note: SCF must be done first to get meaningful results.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"using Plots #hide\ngr() #hide\nENV[\"GKSwstype\"] = \"100\" #hide\nplot_bandstr(tbc_alp, do_display=false); \nsavefig(\"alp.png\"); #hide","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"(Image: AlP plot)","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Use do_display=true to produce an interactive plot.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"The default just picks some random kpoints, but you can add your own kpath. We also project onto the s orbital of Al.","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"kpath=[0.0 0.0 0.0; 0.5 0.5 0.5; 0.0 0.5 0.5];\nknames=[\"Γ\", \"X\", \"V\"];\nplot_bandstr(tbc_alp, kpath=kpath, names=knames, npts=100, proj_orbs=[:s], proj_types=[\"Al\"], do_display=false);\nsavefig(\"alp2.png\"); #hide","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"(Image: AlP plot)","category":"page"},{"location":"ug_run/#**Calculate-force-/-stress**","page":"Running Calculations","title":"Calculate force / stress","text":"","category":"section"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"energy, force, stress, tbc = scf_energy_force_stress(tbc_alp);\n\nprintln(\"energy $energy\")\nprintln()\nprintln(\"Forces\")\nshow(stdout, \"text/plain\", force)\nprintln()\nprintln(\"Stress\")\nshow(stdout, \"text/plain\", stress)\nnothing #hide","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Can also be called directly on a new crystal structure instead of a tb_crys object.","category":"page"},{"location":"ug_run/#**Relax-structure**","page":"Running Calculations","title":"Relax structure","text":"","category":"section"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"crys_new, tbc_updated, energy, force, stress = relax_structure(alp);\n\nprintln(\"Energy new $energy\")\nprintln()\nprintln(\"Force\")\nshow(stdout, \"text/plain\", force)\nprintln()\nprintln(\"Stress\")\nshow(stdout, \"text/plain\", stress)\nnothing #hide","category":"page"},{"location":"ug_run/","page":"Running Calculations","title":"Running Calculations","text":"Energy is lower, stress is near zero, forces are zero by symmetry in Zinc Blende structure.","category":"page"},{"location":"#TightlyBound.jl-Documentation","page":"Home","title":"TightlyBound.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A three-body tight binding program written in Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"Primary Author: Kevin F. Garrity, NIST","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThis package currently barely works. Needs much more testing.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Run tight-binding calculations with near DFT level accuracy (PBEsol).\nGet results in seconds based on pre-fit parameters from across periodic table.\nCalculate band structures and total energies.\nGet forces, stresses, and relax structures.\nParameters based on two- and three-body interactions.\nIncludes self-consistent treatment of long-range Coulomb interaction.\nPlotting based on interface of Plots.jl","category":"page"},{"location":"#Outline","page":"Home","title":"Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Stuff\nOther stuff","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"ug_fit/#Fitting-tight-binding-coefficients-from-Quantum-Espresso.","page":"Fit Coefficients","title":"Fitting tight-binding coefficients from Quantum Espresso.","text":"","category":"section"},{"location":"ug_fit/","page":"Fit Coefficients","title":"Fit Coefficients","text":"to add later...","category":"page"}]
}
